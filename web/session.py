
# Most of the heavy lifting for this class will be part of the
# db_manager implementation, since it is the adapter between the
# python space and the database backend. This version of Session is
# not designed to leave server space as a cookie.
class Session:

    # the intent is that if session_id is not provided we are trying
    # to start a completely new session under the database connection
    # and a new session should be generated. A db_manager facade layer
    # is used instead of straight SQL to accomodate multiple SQL
    # backends.
    def __init__(self, db_manager, session_id=None):

        self.db_manager = db_manager  # some subclass of
                                      # DatabaseManager

        self.existing_session = False # By default this is false. If a
                                      # session is loaded later on it
                                      # is up to it to set this to be
                                      # true.

        self.session_id = session_id  # Saving a copy of the passed-in
                                      # session_id.

        self.values = dict()          # an empty dictionary of values
                                      # to be appended to/replaced by
                                      # a load_by_session_id or the
                                      # user adding values.

        if session_id is not None:
            # call helper to fill out this 
            _load_by_session_id(db_manager, session_id)
        return

    # The session itself is a key-value store, and the most reasonable
    # way to interpret how to access it is to receive a dict from the
    # data inside the session. Since Python would pass this by
    # reference instead of by value we can assert that any
    # modifications done outside of a session object
    def get_dict(self):
        return self.values()

    # We keep a context to the database manager in question open so
    # this call becomes trivial.
    def save(self):

        if self.existing_session is False:
            self.db_manager.make_new_session(self.values)
        else:
            self.db_manager.replace_session(self.session_id, 
                                            self.values)
        return False

    # Reach out the database to grab a session id. Session id's are
    # UUID's generated by python's internal uuid. Specifically uuid4
    # since they are random and are independent on factors that make
    # them predictable to guess. Since any random UUID system is bound
    # to have collisions it is expected that the db_manager handles
    # this uncertainty. UUID's should also be managed in integer form
    # to prevent string problems.
    def _load_by_session_id(self, db_manager, session_id):

        self.values = db_manager.get_session_dict(session_id)
        return
    
